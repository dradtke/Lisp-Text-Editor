<?xml version="1.0" encoding="UTF-8"?>
<documentation include-internal-symbols-p="yes" single-page-p="yes" index-title="gobject.type-info API reference" css="index.css" heading="gobject.type-info"><package name="gobject.type-info" id="gobject.type-info"><documentation-string>This package contains functions for querying the basic type information from GObject type system. For an overview of GObject type system, see <a a="http://library.gnome.org/devel/gobject/stable/index.html">GObject documentation</a><break/>Types are identified by GType designators that are specified in <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>. Functions of this package provide means to query basic information about type.<break/><itemize><item><fun id="gobject.type-info__fun__g-type-name">g-type-name</fun> and <fun id="gobject.type-info__fun__g-type-from-name">g-type-from-name</fun> convert between numeric and string representation of GType.</item><item><fun id="gobject.type-info__fun__g-type-parent">g-type-parent</fun>, <fun id="gobject.type-info__fun__g-type-children">g-type-children</fun> and <fun id="gobject.type-info__fun__g-type-interfaces">g-type-interfaces</fun> traverse across the type hierarchy.</item><item><fun id="gobject.type-info__fun__g-type-depth">g-type-depth</fun>, <fun id="gobject.type-info__fun__g-type-fundamental">g-type-fundamental</fun>, <fun id="gobject.type-info__fun__g-type-is-a">g-type-is-a</fun>, <fun id="gobject.type-info__fun__g-type-next-base">g-type-next-base</fun> are convenience functions that provide useful information from type hierarchy</item></itemize><break/>
This is a list of variables and functions that correspond to basic types:<itemize><item><fun id="gobject.type-info__fun__g-closure-get-type">g-closure-get-type</fun></item><item><fun id="gobject.type-info__fun__g-strv-get-type">g-strv-get-type</fun></item><item><variable id="gobject.type-info__variable__+g-type-invalid+">+g-type-invalid+</variable></item><item><variable id="gobject.type-info__variable__+g-type-void+">+g-type-void+</variable></item><item><variable id="gobject.type-info__variable__+g-type-interface+">+g-type-interface+</variable></item><item><variable id="gobject.type-info__variable__+g-type-char+">+g-type-char+</variable></item><item><variable id="gobject.type-info__variable__+g-type-uchar+">+g-type-uchar+</variable></item><item><variable id="gobject.type-info__variable__+g-type-boolean+">+g-type-boolean+</variable></item><item><variable id="gobject.type-info__variable__+g-type-int+">+g-type-int+</variable></item><item><variable id="gobject.type-info__variable__+g-type-uint+">+g-type-uint+</variable></item><item><variable id="gobject.type-info__variable__+g-type-long+">+g-type-long+</variable></item><item><variable id="gobject.type-info__variable__+g-type-ulong+">+g-type-ulong+</variable></item><item><variable id="gobject.type-info__variable__+g-type-int64+">+g-type-int64+</variable></item><item><variable id="gobject.type-info__variable__+g-type-uint64+">+g-type-uint64+</variable></item><item><variable id="gobject.type-info__variable__+g-type-enum+">+g-type-enum+</variable></item><item><variable id="gobject.type-info__variable__+g-type-flags+">+g-type-flags+</variable></item><item><variable id="gobject.type-info__variable__+g-type-float+">+g-type-float+</variable></item><item><variable id="gobject.type-info__variable__+g-type-double+">+g-type-double+</variable></item><item><variable id="gobject.type-info__variable__+g-type-string+">+g-type-string+</variable></item><item><variable id="gobject.type-info__variable__+g-type-pointer+">+g-type-pointer+</variable></item><item><variable id="gobject.type-info__variable__+g-type-boxed+">+g-type-boxed+</variable></item><item><variable id="gobject.type-info__variable__+g-type-param+">+g-type-param+</variable></item><item><variable id="gobject.type-info__variable__+g-type-object+">+g-type-object+</variable></item></itemize></documentation-string><external-symbols><function-definition id="gobject.type-info__fun__g-strv-get-type" name="g-strv-get-type" package="gobject.type-info"><lambda-list/><documentation-string>Returns the type designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>) for GStrv type. As a side effect, ensures that the type is registered.</documentation-string></function-definition><variable-definition id="gobject.type-info__variable__+g-type-int64+" name="+g-type-int64+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>gint64</code>.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-param+" name="+g-type-param+" package="gobject.type-info"><documentation-string>The fundamental type from which all GParamSpec types are derived.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-boolean+" name="+g-type-boolean+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>gboolean</code>.</documentation-string></variable-definition><function-definition id="gobject.type-info__fun__g-type-next-base" name="g-type-next-base" package="gobject.type-info"><lambda-list><elt>leaf-type</elt><elt>root-type</elt></lambda-list><documentation-string>Determines the type that is derived directly from <code>root-type</code> which is also a base class of <code>leaf-type</code>.<break/>
Example:<pre>
(g-type-next-base "GtkButton" "GtkWidget")
=&gt; "GtkContainer"</pre><arg arg="leaf-type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><arg arg="root-type">GType designator</arg><return>GType designator</return></documentation-string></function-definition><variable-definition id="gobject.type-info__variable__+g-type-boxed+" name="+g-type-boxed+" package="gobject.type-info"><documentation-string>The fundamental type from which all boxed types are derived.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-uchar+" name="+g-type-uchar+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>guchar</code>.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-uint64+" name="+g-type-uint64+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>guint64</code>.</documentation-string></variable-definition><function-definition id="gobject.type-info__fun__g-type-interface-prerequisites" name="g-type-interface-prerequisites" package="gobject.type-info"><lambda-list><elt>g-type</elt></lambda-list><documentation-string>Returns the prerequisites of an interface type. Prerequisite is a type that must be a superclass of an implementing class or an interface that the object must also implement.<break/>
Example:<pre>
(g-type-interface-prerequisites "GtkTreeModel")
=&gt; ("GObject")</pre><arg arg="g-type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><return>list of GType designators</return></documentation-string></function-definition><variable-definition id="gobject.type-info__variable__+g-type-invalid+" name="+g-type-invalid+" package="gobject.type-info"><documentation-string>An invalid GType used as error return value in some functions which return a GType.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-interface+" name="+g-type-interface+" package="gobject.type-info"><documentation-string>The fundamental type from which all interfaces are derived.</documentation-string></variable-definition><class-definition id="gobject.type-info__class__g-type-designator" name="g-type-designator" package="gobject.type-info"><cpl><superclass status="INTERNAL" name="enhanced-foreign-type" package="cffi"/><superclass status="INTERNAL" name="foreign-type-alias" package="cffi"/><superclass status="INTERNAL" name="foreign-type" package="cffi"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string>Values of this CFFI foreign type identify the GType. GType is designated by a its name (a string) or a numeric identifier. Functions accept GType designators as a string or integer and return them as a string. Functions <fun id="gobject.type-info__fun__g-type-name">g-type-name</fun> and <fun id="gobject.type-info__fun__g-type-from-name">g-type-from-name</fun> are used to convert between name and numeric identifier.<break/>Numeric identifier of GType may be different between different program runs. But string identifier of GType does not change.</documentation-string></class-definition><variable-definition id="gobject.type-info__variable__+g-type-object+" name="+g-type-object+" package="gobject.type-info"><documentation-string>The fundamental type for GObject.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-char+" name="+g-type-char+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to gchar. The type designated by <variable id="gobject.type-info__variable__+g-type-char+">+g-type-char+</variable> is unconditionally an 8-bit signed integer. This may or may not be the same type a the C type <code>gchar</code>.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-int+" name="+g-type-int+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>gint</code>.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-pointer+" name="+g-type-pointer+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>gpointer</code>.</documentation-string></variable-definition><function-definition id="gobject.type-info__fun__g-type-children" name="g-type-children" package="gobject.type-info"><lambda-list><elt>g-type</elt></lambda-list><documentation-string>Returns the list of types inherited from <code>g-type</code>.<see id="gobject.type-info__fun__g-type-parent">g-type-parent</see><break/>
Example:<pre>
(g-type-children "GtkObject")
=&gt; ("GtkWidget" "GtkAdjustment" "GtkTreeViewColumn" "GtkCellRenderer"
    "GtkFileFilter" "GtkRecentFilter" "GtkTooltips")</pre><arg arg="g-type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><return>list of GType designators</return></documentation-string></function-definition><function-definition id="gobject.type-info__fun__g-closure-get-type" name="g-closure-get-type" package="gobject.type-info"><lambda-list/><documentation-string>Returns the type designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>) for GClosure type. As a side effect, ensure that the type is registered.</documentation-string></function-definition><variable-definition id="gobject.type-info__variable__+g-type-uint+" name="+g-type-uint+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>guint</code>.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-void+" name="+g-type-void+" package="gobject.type-info"><documentation-string>A fundamental type which is used as a replacement for the C <code>void</code> return type.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-enum+" name="+g-type-enum+" package="gobject.type-info"><documentation-string>The fundamental type from which all enumeration types are derived.</documentation-string></variable-definition><function-definition id="gobject.type-info__fun__g-type-name" name="g-type-name" package="gobject.type-info"><lambda-list><elt>type</elt></lambda-list><documentation-string>Returns the name of a GType.<see id="gobject.type-info__fun__g-type-from-name">g-type-from-name</see><break/>
Example:<pre>
(g-type-from-name "GtkLabel")
=&gt; 7151952
(g-type-name 7151952)
=&gt; "GtkLabel"</pre><arg arg="type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><return>a string</return></documentation-string></function-definition><variable-definition id="gobject.type-info__variable__+g-type-float+" name="+g-type-float+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>gfloat</code>.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-double+" name="+g-type-double+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>gdouble</code>.</documentation-string></variable-definition><function-definition id="gobject.type-info__fun__g-type-depth" name="g-type-depth" package="gobject.type-info"><lambda-list><elt>type</elt></lambda-list><documentation-string>Returns the length of the ancestry of <code>type</code>. This includes the <code>type</code> itself, so that e.g. a fundamental type has depth 1.<break/>
Example:<pre>
(g-type-depth "GtkLabel")
=&gt; 6</pre><arg arg="type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><return>an integer</return></documentation-string></function-definition><variable-definition id="gobject.type-info__variable__+g-type-long+" name="+g-type-long+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>glong</code>.</documentation-string></variable-definition><function-definition id="gobject.type-info__fun__g-type-parent" name="g-type-parent" package="gobject.type-info"><lambda-list><elt>type</elt></lambda-list><documentation-string>Returns the parent of a GType. <see id="gobject.type-info__fun__g-type-chilren">g-type-chilren</see><break/>
Example:<pre>
(g-type-parent "GtkLabel")
=&gt; "GtkMisc"</pre><arg arg="type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><return>GType designator</return></documentation-string></function-definition><variable-definition id="gobject.type-info__variable__+g-type-ulong+" name="+g-type-ulong+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to <code>gulong</code>.</documentation-string></variable-definition><variable-definition id="gobject.type-info__variable__+g-type-string+" name="+g-type-string+" package="gobject.type-info"><documentation-string>The fundamental type corresponding to null-terminated C strings.</documentation-string></variable-definition><function-definition id="gobject.type-info__fun__g-type-is-a" name="g-type-is-a" package="gobject.type-info"><lambda-list><elt>type</elt><elt>is-a-type</elt></lambda-list><documentation-string>If <code>is-a-type</code> is a derivable type, check whether type is a descendant of <code>is-a-type</code>. If <code>is-a-type</code> is an interface, check whether type conforms to it.<break/>
Example:<pre>
(g-type-is-a "GtkButton" "GtkWidget")
=&gt; T
(g-type-is-a "GtkButton" "AtkImplementorIface")
=&gt; T
(g-type-is-a "GtkButton" "GtkLabel")
=&gt; NIL</pre><arg arg="type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><arg arg="is-a-type">GType designator</arg><return>boolean</return></documentation-string></function-definition><function-definition id="gobject.type-info__fun__g-type-fundamental" name="g-type-fundamental" package="gobject.type-info"><lambda-list><elt>type</elt></lambda-list><documentation-string>Returns the fundamental type which is the ancestor of <code>type</code>.<break/>
Example:<pre>
(g-type-fundamental "GtkWindowType")
=&gt; "GEnum"
(g-type-fundamental "GtkLabel")
=&gt; "GObject"</pre><arg arg="type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><return>GType designator</return></documentation-string></function-definition><function-definition id="gobject.type-info__fun__g-type-from-name" name="g-type-from-name" package="gobject.type-info"><lambda-list><elt>name</elt></lambda-list><documentation-string>Returns the numeric identifier of a GType by its name. <see id="gobject.type-info__fun__g-type-name">g-type-name</see><break/>
Example:<pre>
(g-type-from-name "GtkLabel")
=&gt; 7151952
(g-type-name 7151952)
=&gt; "GtkLabel"</pre><arg arg="name">a string - name of GType</arg><return>an integer</return></documentation-string></function-definition><variable-definition id="gobject.type-info__variable__+g-type-flags+" name="+g-type-flags+" package="gobject.type-info"><documentation-string>The fundamental type from which all flags types are derived.</documentation-string></variable-definition><function-definition id="gobject.type-info__fun__g-type-interfaces" name="g-type-interfaces" package="gobject.type-info"><lambda-list><elt>g-type</elt></lambda-list><documentation-string>Returns the list of interfaces the <code>g-type</code> conforms to.<break/>
Example:<pre>
(g-type-interfaces "GtkButton")
=&gt; ("AtkImplementorIface" "GtkBuildable" "GtkActivatable")</pre><arg arg="g-type">GType designator (see <class id="gobject.type-info__class__g-type-designator">g-type-designator</class>)</arg><return>list of GType designators</return></documentation-string></function-definition></external-symbols><internal-symbols><function-definition id="gobject.type-info__fun__gtype-make-fundamental-type" name="gtype-make-fundamental-type" package="gobject.type-info"><lambda-list><elt>x</elt></lambda-list></function-definition><function-definition id="gobject.type-info__fun___g-type-interfaces" name="%g-type-interfaces" package="gobject.type-info"><lambda-list><elt>type</elt><elt>n-interfaces</elt></lambda-list></function-definition><function-definition id="gobject.type-info__fun___g-type-init" name="%g-type-init" package="gobject.type-info"><lambda-list/></function-definition><function-definition id="gobject.type-info__fun__g-type-default-interface-unref" name="g-type-default-interface-unref" package="gobject.type-info"><lambda-list><elt>interface</elt></lambda-list></function-definition><function-definition id="gobject.type-info__fun__g-type-default-interface-ref" name="g-type-default-interface-ref" package="gobject.type-info"><lambda-list><elt>type</elt></lambda-list></function-definition><function-definition id="gobject.type-info__fun___g-type-children" name="%g-type-children" package="gobject.type-info"><lambda-list><elt>type</elt><elt>n-children</elt></lambda-list></function-definition><function-definition id="gobject.type-info__fun___g-type-interface-prerequisites" name="%g-type-interface-prerequisites" package="gobject.type-info"><lambda-list><elt>type</elt><elt>n-interface-prerequisites</elt></lambda-list></function-definition></internal-symbols></package></documentation>